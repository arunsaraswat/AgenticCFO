"""add core platform tables for multi-agent system

Revision ID: e57dddfd4d2a
Revises: 001
Create Date: 2025-10-16 22:41:42.102968

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'e57dddfd4d2a'
down_revision: Union[str, None] = '001'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tenants',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('slug', sa.String(length=100), nullable=False),
    sa.Column('settings', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tenants_id'), 'tenants', ['id'], unique=False)
    op.create_index(op.f('ix_tenants_is_active'), 'tenants', ['is_active'], unique=False)
    op.create_index(op.f('ix_tenants_slug'), 'tenants', ['slug'], unique=True)
    op.create_table('mapping_configs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('template_type', sa.String(length=100), nullable=False),
    sa.Column('column_mappings', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('date_formats', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('validation_rules', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('use_count', sa.Integer(), nullable=False),
    sa.Column('last_used_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_mapping_configs_id'), 'mapping_configs', ['id'], unique=False)
    op.create_index(op.f('ix_mapping_configs_template_type'), 'mapping_configs', ['template_type'], unique=False)
    op.create_index(op.f('ix_mapping_configs_tenant_id'), 'mapping_configs', ['tenant_id'], unique=False)
    op.create_table('policy_packs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('version', sa.String(length=50), nullable=False),
    sa.Column('policy_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('effective_from', sa.Date(), nullable=False),
    sa.Column('effective_to', sa.Date(), nullable=True),
    sa.Column('is_active', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_policy_packs_effective_from'), 'policy_packs', ['effective_from'], unique=False)
    op.create_index(op.f('ix_policy_packs_effective_to'), 'policy_packs', ['effective_to'], unique=False)
    op.create_index(op.f('ix_policy_packs_id'), 'policy_packs', ['id'], unique=False)
    op.create_index(op.f('ix_policy_packs_tenant_id'), 'policy_packs', ['tenant_id'], unique=False)
    op.create_table('file_uploads',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('filename', sa.String(length=500), nullable=False),
    sa.Column('file_path', sa.Text(), nullable=False),
    sa.Column('file_hash', sa.String(length=64), nullable=False),
    sa.Column('file_size_bytes', sa.Integer(), nullable=False),
    sa.Column('mime_type', sa.String(length=100), nullable=True),
    sa.Column('upload_channel', sa.String(length=50), nullable=False),
    sa.Column('workbook_risk_score', sa.Float(), nullable=True),
    sa.Column('security_scan_results', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('uploaded_by_user_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['uploaded_by_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_file_uploads_created_at'), 'file_uploads', ['created_at'], unique=False)
    op.create_index(op.f('ix_file_uploads_file_hash'), 'file_uploads', ['file_hash'], unique=False)
    op.create_index(op.f('ix_file_uploads_id'), 'file_uploads', ['id'], unique=False)
    op.create_index(op.f('ix_file_uploads_status'), 'file_uploads', ['status'], unique=False)
    op.create_index(op.f('ix_file_uploads_tenant_id'), 'file_uploads', ['tenant_id'], unique=False)
    op.create_table('work_orders',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('objective', sa.String(length=500), nullable=False),
    sa.Column('input_datasets', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('policy_refs', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('agent_outputs', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('guardrail_checks', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('approval_gates', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('execution_log', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('progress_percentage', sa.Integer(), nullable=False),
    sa.Column('current_agent', sa.String(length=100), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('total_cost_usd', sa.Float(), nullable=False),
    sa.Column('execution_time_seconds', sa.Float(), nullable=True),
    sa.Column('created_by_user_id', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_work_orders_created_at'), 'work_orders', ['created_at'], unique=False)
    op.create_index(op.f('ix_work_orders_id'), 'work_orders', ['id'], unique=False)
    op.create_index(op.f('ix_work_orders_status'), 'work_orders', ['status'], unique=False)
    op.create_index(op.f('ix_work_orders_tenant_id'), 'work_orders', ['tenant_id'], unique=False)
    op.create_table('artifacts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('work_order_id', sa.Integer(), nullable=False),
    sa.Column('artifact_type', sa.String(length=50), nullable=False),
    sa.Column('artifact_name', sa.String(length=500), nullable=False),
    sa.Column('file_path', sa.Text(), nullable=False),
    sa.Column('checksum_sha256', sa.String(length=64), nullable=False),
    sa.Column('file_size_bytes', sa.Integer(), nullable=False),
    sa.Column('mime_type', sa.String(length=100), nullable=True),
    sa.Column('artifact_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('generated_by_agent', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['work_order_id'], ['work_orders.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_artifacts_artifact_type'), 'artifacts', ['artifact_type'], unique=False)
    op.create_index(op.f('ix_artifacts_checksum_sha256'), 'artifacts', ['checksum_sha256'], unique=False)
    op.create_index(op.f('ix_artifacts_created_at'), 'artifacts', ['created_at'], unique=False)
    op.create_index(op.f('ix_artifacts_id'), 'artifacts', ['id'], unique=False)
    op.create_index(op.f('ix_artifacts_work_order_id'), 'artifacts', ['work_order_id'], unique=False)
    op.create_table('audit_events',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('work_order_id', sa.Integer(), nullable=True),
    sa.Column('event_type', sa.String(length=100), nullable=False),
    sa.Column('event_category', sa.String(length=50), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['work_order_id'], ['work_orders.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_audit_events_event_category'), 'audit_events', ['event_category'], unique=False)
    op.create_index(op.f('ix_audit_events_event_type'), 'audit_events', ['event_type'], unique=False)
    op.create_index(op.f('ix_audit_events_id'), 'audit_events', ['id'], unique=False)
    op.create_index(op.f('ix_audit_events_tenant_id'), 'audit_events', ['tenant_id'], unique=False)
    op.create_index(op.f('ix_audit_events_timestamp'), 'audit_events', ['timestamp'], unique=False)
    op.create_index(op.f('ix_audit_events_user_id'), 'audit_events', ['user_id'], unique=False)
    op.create_index(op.f('ix_audit_events_work_order_id'), 'audit_events', ['work_order_id'], unique=False)
    op.create_table('datasets',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('file_upload_id', sa.Integer(), nullable=False),
    sa.Column('template_type', sa.String(length=100), nullable=False),
    sa.Column('entity', sa.String(length=255), nullable=True),
    sa.Column('period_start', sa.Date(), nullable=True),
    sa.Column('period_end', sa.Date(), nullable=True),
    sa.Column('version', sa.Integer(), nullable=False),
    sa.Column('data_hash', sa.String(length=64), nullable=False),
    sa.Column('mapping_config_id', sa.Integer(), nullable=True),
    sa.Column('dq_status', sa.String(length=50), nullable=False),
    sa.Column('dq_results', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('row_count', sa.Integer(), nullable=True),
    sa.Column('column_count', sa.Integer(), nullable=True),
    sa.Column('dataset_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['file_upload_id'], ['file_uploads.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['mapping_config_id'], ['mapping_configs.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('tenant_id', 'template_type', 'entity', 'period_start', 'version', name='uq_dataset_version')
    )
    op.create_index(op.f('ix_datasets_created_at'), 'datasets', ['created_at'], unique=False)
    op.create_index(op.f('ix_datasets_data_hash'), 'datasets', ['data_hash'], unique=False)
    op.create_index(op.f('ix_datasets_entity'), 'datasets', ['entity'], unique=False)
    op.create_index(op.f('ix_datasets_file_upload_id'), 'datasets', ['file_upload_id'], unique=False)
    op.create_index(op.f('ix_datasets_id'), 'datasets', ['id'], unique=False)
    op.create_index(op.f('ix_datasets_period_end'), 'datasets', ['period_end'], unique=False)
    op.create_index(op.f('ix_datasets_period_start'), 'datasets', ['period_start'], unique=False)
    op.create_index(op.f('ix_datasets_template_type'), 'datasets', ['template_type'], unique=False)
    op.create_index(op.f('ix_datasets_tenant_id'), 'datasets', ['tenant_id'], unique=False)

    # Handle existing users: Create default tenant first, then migrate users
    conn = op.get_bind()

    # Create default tenant for existing users
    conn.execute(sa.text("""
        INSERT INTO tenants (name, slug, settings, is_active, created_at, updated_at)
        VALUES ('Default Organization', 'default', '{}', true, NOW(), NOW())
        ON CONFLICT DO NOTHING
    """))

    # Get the default tenant ID
    result = conn.execute(sa.text("SELECT id FROM tenants WHERE slug = 'default' LIMIT 1"))
    default_tenant_id = result.scalar()

    # Add tenant_id column as nullable first
    op.add_column('users', sa.Column('tenant_id', sa.Integer(), nullable=True))

    # Update existing users to use default tenant
    conn.execute(sa.text(f"UPDATE users SET tenant_id = {default_tenant_id} WHERE tenant_id IS NULL"))

    # Now make tenant_id non-nullable
    op.alter_column('users', 'tenant_id', nullable=False)

    # Add other columns with defaults
    op.add_column('users', sa.Column('role', sa.String(length=50), nullable=False, server_default='analyst'))
    op.add_column('users', sa.Column('approval_authority', sa.Integer(), nullable=False, server_default='0'))

    # Remove server defaults after migration
    op.alter_column('users', 'role', server_default=None)
    op.alter_column('users', 'approval_authority', server_default=None)

    op.create_index(op.f('ix_users_tenant_id'), 'users', ['tenant_id'], unique=False)
    op.create_foreign_key(None, 'users', 'tenants', ['tenant_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.drop_index(op.f('ix_users_tenant_id'), table_name='users')
    op.drop_column('users', 'approval_authority')
    op.drop_column('users', 'role')
    op.drop_column('users', 'tenant_id')
    op.drop_index(op.f('ix_datasets_tenant_id'), table_name='datasets')
    op.drop_index(op.f('ix_datasets_template_type'), table_name='datasets')
    op.drop_index(op.f('ix_datasets_period_start'), table_name='datasets')
    op.drop_index(op.f('ix_datasets_period_end'), table_name='datasets')
    op.drop_index(op.f('ix_datasets_id'), table_name='datasets')
    op.drop_index(op.f('ix_datasets_file_upload_id'), table_name='datasets')
    op.drop_index(op.f('ix_datasets_entity'), table_name='datasets')
    op.drop_index(op.f('ix_datasets_data_hash'), table_name='datasets')
    op.drop_index(op.f('ix_datasets_created_at'), table_name='datasets')
    op.drop_table('datasets')
    op.drop_index(op.f('ix_audit_events_work_order_id'), table_name='audit_events')
    op.drop_index(op.f('ix_audit_events_user_id'), table_name='audit_events')
    op.drop_index(op.f('ix_audit_events_timestamp'), table_name='audit_events')
    op.drop_index(op.f('ix_audit_events_tenant_id'), table_name='audit_events')
    op.drop_index(op.f('ix_audit_events_id'), table_name='audit_events')
    op.drop_index(op.f('ix_audit_events_event_type'), table_name='audit_events')
    op.drop_index(op.f('ix_audit_events_event_category'), table_name='audit_events')
    op.drop_table('audit_events')
    op.drop_index(op.f('ix_artifacts_work_order_id'), table_name='artifacts')
    op.drop_index(op.f('ix_artifacts_id'), table_name='artifacts')
    op.drop_index(op.f('ix_artifacts_created_at'), table_name='artifacts')
    op.drop_index(op.f('ix_artifacts_checksum_sha256'), table_name='artifacts')
    op.drop_index(op.f('ix_artifacts_artifact_type'), table_name='artifacts')
    op.drop_table('artifacts')
    op.drop_index(op.f('ix_work_orders_tenant_id'), table_name='work_orders')
    op.drop_index(op.f('ix_work_orders_status'), table_name='work_orders')
    op.drop_index(op.f('ix_work_orders_id'), table_name='work_orders')
    op.drop_index(op.f('ix_work_orders_created_at'), table_name='work_orders')
    op.drop_table('work_orders')
    op.drop_index(op.f('ix_file_uploads_tenant_id'), table_name='file_uploads')
    op.drop_index(op.f('ix_file_uploads_status'), table_name='file_uploads')
    op.drop_index(op.f('ix_file_uploads_id'), table_name='file_uploads')
    op.drop_index(op.f('ix_file_uploads_file_hash'), table_name='file_uploads')
    op.drop_index(op.f('ix_file_uploads_created_at'), table_name='file_uploads')
    op.drop_table('file_uploads')
    op.drop_index(op.f('ix_policy_packs_tenant_id'), table_name='policy_packs')
    op.drop_index(op.f('ix_policy_packs_id'), table_name='policy_packs')
    op.drop_index(op.f('ix_policy_packs_effective_to'), table_name='policy_packs')
    op.drop_index(op.f('ix_policy_packs_effective_from'), table_name='policy_packs')
    op.drop_table('policy_packs')
    op.drop_index(op.f('ix_mapping_configs_tenant_id'), table_name='mapping_configs')
    op.drop_index(op.f('ix_mapping_configs_template_type'), table_name='mapping_configs')
    op.drop_index(op.f('ix_mapping_configs_id'), table_name='mapping_configs')
    op.drop_table('mapping_configs')
    op.drop_index(op.f('ix_tenants_slug'), table_name='tenants')
    op.drop_index(op.f('ix_tenants_is_active'), table_name='tenants')
    op.drop_index(op.f('ix_tenants_id'), table_name='tenants')
    op.drop_table('tenants')
    # ### end Alembic commands ###
